import os
import re
import logging
from dotenv import load_dotenv
from openai import OpenAI
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, MessageHandler, CommandHandler, filters

# ----- —É—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—Å–∞–Ω–∏—Ç–∞–π–∑–∞ -----
CITATION_RE = re.compile(r"„Äê[^„Äë]*„Äë")
FILES_RE = re.compile(r"\b[\w.-]+\.(json|pdf|csv|md)\b", re.IGNORECASE)
URL_RE = re.compile(r"https?://\S+")
SPACE_RE = re.compile(r"[ \t]+\n")

def sanitize_markdown(text: str) -> str:
    """–£–¥–∞–ª—è–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ö–≤–æ—Å—Ç—ã –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–º—É Telegram Markdown."""
    text = CITATION_RE.sub("", text)               # —É–¥–∞–ª–∏—Ç—å „Äê...„Äë
    text = FILES_RE.sub("", text)                  # —É–±—Ä–∞—Ç—å –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    text = URL_RE.sub("", text)                    # —É–±—Ä–∞—Ç—å URL
    text = SPACE_RE.sub("\n", text)                # —Ö–≤–æ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–±–µ–ª—ã –ø–µ—Ä–µ–¥ \n
    text = text.replace("\r\n", "\n").strip()
    # –ò–Ω–æ–≥–¥–∞ –º–æ–¥–µ–ª—å —Å—Ç–∞–≤–∏—Ç –ª–∏—à–Ω–∏–µ –±—ç–∫—Ç–∏–∫–∏/—Å–∫–æ–±–∫–∏ –≤ –∫–æ–Ω—Ü–µ ‚Äî –º—è–≥–∫–∞—è –æ—á–∏—Å—Ç–∫–∞:
    text = text.strip("` \n")
    return text

load_dotenv()

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ASSISTANT_ID = os.getenv("ASSISTANT_ID")

if not (OPENAI_API_KEY and TELEGRAM_BOT_TOKEN and ASSISTANT_ID):
    raise RuntimeError("–ü—Ä–æ–≤–µ—Ä—å .env: –Ω—É–∂–µ–Ω OPENAI_API_KEY, TELEGRAM_BOT_TOKEN –∏ ASSISTANT_ID")

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("tg-assistant-NutriMind")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ thread_id –ø–æ chat_id (–¥–ª—è –¥–µ–º–æ –≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞)
THREADS = {}  # {chat_id: thread_id}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n"
        "–û—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É OpenAI."
    )

def get_or_create_thread_id(chat_id: int) -> str:
    """–°–æ–∑–¥–∞—ë–º Thread –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞ —á–∞—Ç –∏ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    if chat_id in THREADS:
        return THREADS[chat_id]
    thread = client.beta.threads.create()
    THREADS[chat_id] = thread.id
    return thread.id

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return
    user_text = update.message.text.strip()
    chat_id = update.effective_chat.id

    status_msg = await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")  # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

    # 1) –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞—ë–º thread –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    thread_id = get_or_create_thread_id(chat_id)

    # 2) –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Thread
    client.beta.threads.messages.create(
        thread_id=thread_id,
        role="user",
        content=user_text
    )

    # 3) –ó–∞–ø—É—Å–∫–∞–µ–º Run –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (create_and_poll)
    run = client.beta.threads.runs.create_and_poll(
        thread_id=thread_id,
        assistant_id=ASSISTANT_ID,
    )

    # 4) –î–æ—Å—Ç–∞—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ Thread
    messages = client.beta.threads.messages.list(thread_id=thread_id, order="desc", limit=5)
    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    reply_text = None
    for m in messages.data:
        if m.role == "assistant":
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —á–∞—Å—Ç–∏
            parts = []
            for c in m.content:
                if c.type == "text":
                    parts.append(c.text.value)
            if parts:
                reply_text = "\n".join(parts)
                break

    if not reply_text:
        reply_text = "–ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."

    # await update.message.reply_text(reply_text)
    clean = sanitize_markdown(reply_text)
    await update.message.reply_text(
        clean,
        parse_mode="Markdown",
        disable_web_page_preview=True
    )

def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    log.info("Bot started.")
    app.run_polling()

if __name__ == "__main__":
    main()
